Let’s have a value called factor, which will be initialized to 0. First, drop a jar from the first rung. If the jar doesn’t break, increase factor by 1 and use it to increase the current rung number. This will give the next rung, from which we will repeat the process until a jar breaks. Once a jar breaks at a certain rung, we will record the number of the current rung, decrease factor by 1, and use it to decrease the current rung number. Then we will reset factor to 1 and repeat the process from step 1 until our other jar breaks, OR we reach the rung just below the rung from which the first jar broke WITHOUT breaking the second jar OR we reach the rung from which the first jar broke. If the first case is true, we will give the rung just below the rung from which our jar broke as our answer. If the second case is true, we will give the current rung as our answer. If the third case is true, we will give the rung below the rung from which the first jar broke as our answer. 
However, if we just did the first steps and got a rung whose value is greater than the total number of rungs, then we do the same later steps to retrace our steps. If we reach a point where we cannot retrace back to the rungs on the ladder, than we will give the highest rung on the ladder as our answer. However, if the first jar breaks from the very first rung, we will return nothing as our answer, since this indicates that there is no possible rung from which a jar can be dropped without breaking. 